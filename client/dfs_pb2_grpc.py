# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dfs_pb2 as dfs__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dfs_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NameNodeServiceStub(object):
    """===========================================================
    Servicio NameNode <-> Cliente
    ===========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutFile = channel.unary_unary(
                '/dfs.NameNodeService/PutFile',
                request_serializer=dfs__pb2.PutFileRequest.SerializeToString,
                response_deserializer=dfs__pb2.PutFileResponse.FromString,
                _registered_method=True)
        self.GetFile = channel.unary_unary(
                '/dfs.NameNodeService/GetFile',
                request_serializer=dfs__pb2.GetFileRequest.SerializeToString,
                response_deserializer=dfs__pb2.GetFileResponse.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/dfs.NameNodeService/ListFiles',
                request_serializer=dfs__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=dfs__pb2.ListFilesResponse.FromString,
                _registered_method=True)
        self.RemoveFile = channel.unary_unary(
                '/dfs.NameNodeService/RemoveFile',
                request_serializer=dfs__pb2.RemoveFileRequest.SerializeToString,
                response_deserializer=dfs__pb2.RemoveFileResponse.FromString,
                _registered_method=True)


class NameNodeServiceServicer(object):
    """===========================================================
    Servicio NameNode <-> Cliente
    ===========================================================
    """

    def PutFile(self, request, context):
        """Subir un archivo: cliente indica nombre y tamaño, NN responde con asignación de bloques
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFile(self, request, context):
        """Descargar un archivo: cliente pide info de bloques
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """Listar archivos del usuario
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFile(self, request, context):
        """Eliminar un archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PutFile': grpc.unary_unary_rpc_method_handler(
                    servicer.PutFile,
                    request_deserializer=dfs__pb2.PutFileRequest.FromString,
                    response_serializer=dfs__pb2.PutFileResponse.SerializeToString,
            ),
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=dfs__pb2.GetFileRequest.FromString,
                    response_serializer=dfs__pb2.GetFileResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=dfs__pb2.ListFilesRequest.FromString,
                    response_serializer=dfs__pb2.ListFilesResponse.SerializeToString,
            ),
            'RemoveFile': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFile,
                    request_deserializer=dfs__pb2.RemoveFileRequest.FromString,
                    response_serializer=dfs__pb2.RemoveFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dfs.NameNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dfs.NameNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NameNodeService(object):
    """===========================================================
    Servicio NameNode <-> Cliente
    ===========================================================
    """

    @staticmethod
    def PutFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/PutFile',
            dfs__pb2.PutFileRequest.SerializeToString,
            dfs__pb2.PutFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/GetFile',
            dfs__pb2.GetFileRequest.SerializeToString,
            dfs__pb2.GetFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/ListFiles',
            dfs__pb2.ListFilesRequest.SerializeToString,
            dfs__pb2.ListFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.NameNodeService/RemoveFile',
            dfs__pb2.RemoveFileRequest.SerializeToString,
            dfs__pb2.RemoveFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DataNodeServiceStub(object):
    """===========================================================
    Servicio Cliente <-> DataNode
    ===========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadBlock = channel.unary_unary(
                '/dfs.DataNodeService/UploadBlock',
                request_serializer=dfs__pb2.BlockUploadRequest.SerializeToString,
                response_deserializer=dfs__pb2.BlockUploadResponse.FromString,
                _registered_method=True)
        self.DownloadBlock = channel.unary_unary(
                '/dfs.DataNodeService/DownloadBlock',
                request_serializer=dfs__pb2.BlockDownloadRequest.SerializeToString,
                response_deserializer=dfs__pb2.BlockDownloadResponse.FromString,
                _registered_method=True)


class DataNodeServiceServicer(object):
    """===========================================================
    Servicio Cliente <-> DataNode
    ===========================================================
    """

    def UploadBlock(self, request, context):
        """Subir un bloque a un DataNode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadBlock(self, request, context):
        """Descargar un bloque desde un DataNode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadBlock,
                    request_deserializer=dfs__pb2.BlockUploadRequest.FromString,
                    response_serializer=dfs__pb2.BlockUploadResponse.SerializeToString,
            ),
            'DownloadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadBlock,
                    request_deserializer=dfs__pb2.BlockDownloadRequest.FromString,
                    response_serializer=dfs__pb2.BlockDownloadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dfs.DataNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dfs.DataNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataNodeService(object):
    """===========================================================
    Servicio Cliente <-> DataNode
    ===========================================================
    """

    @staticmethod
    def UploadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.DataNodeService/UploadBlock',
            dfs__pb2.BlockUploadRequest.SerializeToString,
            dfs__pb2.BlockUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.DataNodeService/DownloadBlock',
            dfs__pb2.BlockDownloadRequest.SerializeToString,
            dfs__pb2.BlockDownloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ClusterServiceStub(object):
    """===========================================================
    Servicio interno NameNode <-> DataNodes (Cluster Management)
    ===========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterDataNode = channel.unary_unary(
                '/dfs.ClusterService/RegisterDataNode',
                request_serializer=dfs__pb2.RegisterDataNodeRequest.SerializeToString,
                response_deserializer=dfs__pb2.RegisterDataNodeResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/dfs.ClusterService/Heartbeat',
                request_serializer=dfs__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=dfs__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.ReportBlock = channel.unary_unary(
                '/dfs.ClusterService/ReportBlock',
                request_serializer=dfs__pb2.ReportBlockRequest.SerializeToString,
                response_deserializer=dfs__pb2.ReportBlockResponse.FromString,
                _registered_method=True)


class ClusterServiceServicer(object):
    """===========================================================
    Servicio interno NameNode <-> DataNodes (Cluster Management)
    ===========================================================
    """

    def RegisterDataNode(self, request, context):
        """Registro inicial de un DataNode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Heartbeat: DataNode avisa que sigue activo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportBlock(self, request, context):
        """Reporte de bloques almacenados
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterDataNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDataNode,
                    request_deserializer=dfs__pb2.RegisterDataNodeRequest.FromString,
                    response_serializer=dfs__pb2.RegisterDataNodeResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=dfs__pb2.HeartbeatRequest.FromString,
                    response_serializer=dfs__pb2.HeartbeatResponse.SerializeToString,
            ),
            'ReportBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportBlock,
                    request_deserializer=dfs__pb2.ReportBlockRequest.FromString,
                    response_serializer=dfs__pb2.ReportBlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dfs.ClusterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dfs.ClusterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClusterService(object):
    """===========================================================
    Servicio interno NameNode <-> DataNodes (Cluster Management)
    ===========================================================
    """

    @staticmethod
    def RegisterDataNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.ClusterService/RegisterDataNode',
            dfs__pb2.RegisterDataNodeRequest.SerializeToString,
            dfs__pb2.RegisterDataNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.ClusterService/Heartbeat',
            dfs__pb2.HeartbeatRequest.SerializeToString,
            dfs__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dfs.ClusterService/ReportBlock',
            dfs__pb2.ReportBlockRequest.SerializeToString,
            dfs__pb2.ReportBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

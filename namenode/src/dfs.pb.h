// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dfs.proto
// Protobuf C++ Version: 5.29.5

#ifndef dfs_2eproto_2epb_2eh
#define dfs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dfs_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dfs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_dfs_2eproto;
namespace dfs {
class BlockDownloadRequest;
struct BlockDownloadRequestDefaultTypeInternal;
extern BlockDownloadRequestDefaultTypeInternal _BlockDownloadRequest_default_instance_;
class BlockDownloadResponse;
struct BlockDownloadResponseDefaultTypeInternal;
extern BlockDownloadResponseDefaultTypeInternal _BlockDownloadResponse_default_instance_;
class BlockLocation;
struct BlockLocationDefaultTypeInternal;
extern BlockLocationDefaultTypeInternal _BlockLocation_default_instance_;
class BlockReplicationRequest;
struct BlockReplicationRequestDefaultTypeInternal;
extern BlockReplicationRequestDefaultTypeInternal _BlockReplicationRequest_default_instance_;
class BlockReplicationResponse;
struct BlockReplicationResponseDefaultTypeInternal;
extern BlockReplicationResponseDefaultTypeInternal _BlockReplicationResponse_default_instance_;
class BlockReport;
struct BlockReportDefaultTypeInternal;
extern BlockReportDefaultTypeInternal _BlockReport_default_instance_;
class BlockUploadRequest;
struct BlockUploadRequestDefaultTypeInternal;
extern BlockUploadRequestDefaultTypeInternal _BlockUploadRequest_default_instance_;
class BlockUploadResponse;
struct BlockUploadResponseDefaultTypeInternal;
extern BlockUploadResponseDefaultTypeInternal _BlockUploadResponse_default_instance_;
class GetFileRequest;
struct GetFileRequestDefaultTypeInternal;
extern GetFileRequestDefaultTypeInternal _GetFileRequest_default_instance_;
class GetFileResponse;
struct GetFileResponseDefaultTypeInternal;
extern GetFileResponseDefaultTypeInternal _GetFileResponse_default_instance_;
class HeartbeatRequest;
struct HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class HeartbeatResponse;
struct HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class ListFilesRequest;
struct ListFilesRequestDefaultTypeInternal;
extern ListFilesRequestDefaultTypeInternal _ListFilesRequest_default_instance_;
class ListFilesResponse;
struct ListFilesResponseDefaultTypeInternal;
extern ListFilesResponseDefaultTypeInternal _ListFilesResponse_default_instance_;
class PutFileRequest;
struct PutFileRequestDefaultTypeInternal;
extern PutFileRequestDefaultTypeInternal _PutFileRequest_default_instance_;
class PutFileResponse;
struct PutFileResponseDefaultTypeInternal;
extern PutFileResponseDefaultTypeInternal _PutFileResponse_default_instance_;
class RegisterDataNodeRequest;
struct RegisterDataNodeRequestDefaultTypeInternal;
extern RegisterDataNodeRequestDefaultTypeInternal _RegisterDataNodeRequest_default_instance_;
class RegisterDataNodeResponse;
struct RegisterDataNodeResponseDefaultTypeInternal;
extern RegisterDataNodeResponseDefaultTypeInternal _RegisterDataNodeResponse_default_instance_;
class RemoveFileRequest;
struct RemoveFileRequestDefaultTypeInternal;
extern RemoveFileRequestDefaultTypeInternal _RemoveFileRequest_default_instance_;
class RemoveFileResponse;
struct RemoveFileResponseDefaultTypeInternal;
extern RemoveFileResponseDefaultTypeInternal _RemoveFileResponse_default_instance_;
class ReplicaRequest;
struct ReplicaRequestDefaultTypeInternal;
extern ReplicaRequestDefaultTypeInternal _ReplicaRequest_default_instance_;
class ReplicaResponse;
struct ReplicaResponseDefaultTypeInternal;
extern ReplicaResponseDefaultTypeInternal _ReplicaResponse_default_instance_;
class ReportBlockRequest;
struct ReportBlockRequestDefaultTypeInternal;
extern ReportBlockRequestDefaultTypeInternal _ReportBlockRequest_default_instance_;
class ReportBlockResponse;
struct ReportBlockResponseDefaultTypeInternal;
extern ReportBlockResponseDefaultTypeInternal _ReportBlockResponse_default_instance_;
}  // namespace dfs
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dfs {

// ===================================================================


// -------------------------------------------------------------------

class ReportBlockResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.ReportBlockResponse) */ {
 public:
  inline ReportBlockResponse() : ReportBlockResponse(nullptr) {}
  ~ReportBlockResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReportBlockResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReportBlockResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReportBlockResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReportBlockResponse(const ReportBlockResponse& from) : ReportBlockResponse(nullptr, from) {}
  inline ReportBlockResponse(ReportBlockResponse&& from) noexcept
      : ReportBlockResponse(nullptr, std::move(from)) {}
  inline ReportBlockResponse& operator=(const ReportBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportBlockResponse& operator=(ReportBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportBlockResponse* internal_default_instance() {
    return reinterpret_cast<const ReportBlockResponse*>(
        &_ReportBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(ReportBlockResponse& a, ReportBlockResponse& b) { a.Swap(&b); }
  inline void Swap(ReportBlockResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportBlockResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportBlockResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReportBlockResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportBlockResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReportBlockResponse& from) { ReportBlockResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReportBlockResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.ReportBlockResponse"; }

 protected:
  explicit ReportBlockResponse(::google::protobuf::Arena* arena);
  ReportBlockResponse(::google::protobuf::Arena* arena, const ReportBlockResponse& from);
  ReportBlockResponse(::google::protobuf::Arena* arena, ReportBlockResponse&& from) noexcept
      : ReportBlockResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.ReportBlockResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReportBlockResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class ReplicaResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.ReplicaResponse) */ {
 public:
  inline ReplicaResponse() : ReplicaResponse(nullptr) {}
  ~ReplicaResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplicaResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplicaResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicaResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicaResponse(const ReplicaResponse& from) : ReplicaResponse(nullptr, from) {}
  inline ReplicaResponse(ReplicaResponse&& from) noexcept
      : ReplicaResponse(nullptr, std::move(from)) {}
  inline ReplicaResponse& operator=(const ReplicaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaResponse& operator=(ReplicaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicaResponse* internal_default_instance() {
    return reinterpret_cast<const ReplicaResponse*>(
        &_ReplicaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ReplicaResponse& a, ReplicaResponse& b) { a.Swap(&b); }
  inline void Swap(ReplicaResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicaResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplicaResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicaResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicaResponse& from) { ReplicaResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplicaResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.ReplicaResponse"; }

 protected:
  explicit ReplicaResponse(::google::protobuf::Arena* arena);
  ReplicaResponse(::google::protobuf::Arena* arena, const ReplicaResponse& from);
  ReplicaResponse(::google::protobuf::Arena* arena, ReplicaResponse&& from) noexcept
      : ReplicaResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReplicaDatanodesFieldNumber = 1,
  };
  // repeated string replica_datanodes = 1;
  int replica_datanodes_size() const;
  private:
  int _internal_replica_datanodes_size() const;

  public:
  void clear_replica_datanodes() ;
  const std::string& replica_datanodes(int index) const;
  std::string* mutable_replica_datanodes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_replica_datanodes(int index, Arg_&& value, Args_... args);
  std::string* add_replica_datanodes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_replica_datanodes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& replica_datanodes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_replica_datanodes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_replica_datanodes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_replica_datanodes();

  public:
  // @@protoc_insertion_point(class_scope:dfs.ReplicaResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicaResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> replica_datanodes_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class ReplicaRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.ReplicaRequest) */ {
 public:
  inline ReplicaRequest() : ReplicaRequest(nullptr) {}
  ~ReplicaRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplicaRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplicaRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicaRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicaRequest(const ReplicaRequest& from) : ReplicaRequest(nullptr, from) {}
  inline ReplicaRequest(ReplicaRequest&& from) noexcept
      : ReplicaRequest(nullptr, std::move(from)) {}
  inline ReplicaRequest& operator=(const ReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaRequest& operator=(ReplicaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const ReplicaRequest*>(
        &_ReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ReplicaRequest& a, ReplicaRequest& b) { a.Swap(&b); }
  inline void Swap(ReplicaRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicaRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplicaRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicaRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicaRequest& from) { ReplicaRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplicaRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.ReplicaRequest"; }

 protected:
  explicit ReplicaRequest(::google::protobuf::Arena* arena);
  ReplicaRequest(::google::protobuf::Arena* arena, const ReplicaRequest& from);
  ReplicaRequest(::google::protobuf::Arena* arena, ReplicaRequest&& from) noexcept
      : ReplicaRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlockIdFieldNumber = 1,
  };
  // int64 block_id = 1;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.ReplicaRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicaRequest& from_msg);
    ::int64_t block_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class RemoveFileResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.RemoveFileResponse) */ {
 public:
  inline RemoveFileResponse() : RemoveFileResponse(nullptr) {}
  ~RemoveFileResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemoveFileResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemoveFileResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveFileResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemoveFileResponse(const RemoveFileResponse& from) : RemoveFileResponse(nullptr, from) {}
  inline RemoveFileResponse(RemoveFileResponse&& from) noexcept
      : RemoveFileResponse(nullptr, std::move(from)) {}
  inline RemoveFileResponse& operator=(const RemoveFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFileResponse& operator=(RemoveFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveFileResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveFileResponse*>(
        &_RemoveFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(RemoveFileResponse& a, RemoveFileResponse& b) { a.Swap(&b); }
  inline void Swap(RemoveFileResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveFileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveFileResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RemoveFileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveFileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemoveFileResponse& from) { RemoveFileResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemoveFileResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.RemoveFileResponse"; }

 protected:
  explicit RemoveFileResponse(::google::protobuf::Arena* arena);
  RemoveFileResponse(::google::protobuf::Arena* arena, const RemoveFileResponse& from);
  RemoveFileResponse(::google::protobuf::Arena* arena, RemoveFileResponse&& from) noexcept
      : RemoveFileResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.RemoveFileResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemoveFileResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class RemoveFileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.RemoveFileRequest) */ {
 public:
  inline RemoveFileRequest() : RemoveFileRequest(nullptr) {}
  ~RemoveFileRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemoveFileRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemoveFileRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveFileRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemoveFileRequest(const RemoveFileRequest& from) : RemoveFileRequest(nullptr, from) {}
  inline RemoveFileRequest(RemoveFileRequest&& from) noexcept
      : RemoveFileRequest(nullptr, std::move(from)) {}
  inline RemoveFileRequest& operator=(const RemoveFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFileRequest& operator=(RemoveFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveFileRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveFileRequest*>(
        &_RemoveFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RemoveFileRequest& a, RemoveFileRequest& b) { a.Swap(&b); }
  inline void Swap(RemoveFileRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveFileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveFileRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RemoveFileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveFileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemoveFileRequest& from) { RemoveFileRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemoveFileRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.RemoveFileRequest"; }

 protected:
  explicit RemoveFileRequest(::google::protobuf::Arena* arena);
  RemoveFileRequest(::google::protobuf::Arena* arena, const RemoveFileRequest& from);
  RemoveFileRequest(::google::protobuf::Arena* arena, RemoveFileRequest&& from) noexcept
      : RemoveFileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kFilenameFieldNumber = 3,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string filename = 3;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:dfs.RemoveFileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemoveFileRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class RegisterDataNodeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.RegisterDataNodeResponse) */ {
 public:
  inline RegisterDataNodeResponse() : RegisterDataNodeResponse(nullptr) {}
  ~RegisterDataNodeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegisterDataNodeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegisterDataNodeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterDataNodeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterDataNodeResponse(const RegisterDataNodeResponse& from) : RegisterDataNodeResponse(nullptr, from) {}
  inline RegisterDataNodeResponse(RegisterDataNodeResponse&& from) noexcept
      : RegisterDataNodeResponse(nullptr, std::move(from)) {}
  inline RegisterDataNodeResponse& operator=(const RegisterDataNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterDataNodeResponse& operator=(RegisterDataNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterDataNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterDataNodeResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterDataNodeResponse*>(
        &_RegisterDataNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(RegisterDataNodeResponse& a, RegisterDataNodeResponse& b) { a.Swap(&b); }
  inline void Swap(RegisterDataNodeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterDataNodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterDataNodeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegisterDataNodeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterDataNodeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegisterDataNodeResponse& from) { RegisterDataNodeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegisterDataNodeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.RegisterDataNodeResponse"; }

 protected:
  explicit RegisterDataNodeResponse(::google::protobuf::Arena* arena);
  RegisterDataNodeResponse(::google::protobuf::Arena* arena, const RegisterDataNodeResponse& from);
  RegisterDataNodeResponse(::google::protobuf::Arena* arena, RegisterDataNodeResponse&& from) noexcept
      : RegisterDataNodeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.RegisterDataNodeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterDataNodeResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class RegisterDataNodeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.RegisterDataNodeRequest) */ {
 public:
  inline RegisterDataNodeRequest() : RegisterDataNodeRequest(nullptr) {}
  ~RegisterDataNodeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegisterDataNodeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegisterDataNodeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterDataNodeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterDataNodeRequest(const RegisterDataNodeRequest& from) : RegisterDataNodeRequest(nullptr, from) {}
  inline RegisterDataNodeRequest(RegisterDataNodeRequest&& from) noexcept
      : RegisterDataNodeRequest(nullptr, std::move(from)) {}
  inline RegisterDataNodeRequest& operator=(const RegisterDataNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterDataNodeRequest& operator=(RegisterDataNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterDataNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterDataNodeRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterDataNodeRequest*>(
        &_RegisterDataNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(RegisterDataNodeRequest& a, RegisterDataNodeRequest& b) { a.Swap(&b); }
  inline void Swap(RegisterDataNodeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterDataNodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterDataNodeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegisterDataNodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterDataNodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegisterDataNodeRequest& from) { RegisterDataNodeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegisterDataNodeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.RegisterDataNodeRequest"; }

 protected:
  explicit RegisterDataNodeRequest(::google::protobuf::Arena* arena);
  RegisterDataNodeRequest(::google::protobuf::Arena* arena, const RegisterDataNodeRequest& from);
  RegisterDataNodeRequest(::google::protobuf::Arena* arena, RegisterDataNodeRequest&& from) noexcept
      : RegisterDataNodeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDatanodeIdFieldNumber = 1,
    kIpAddressFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string datanode_id = 1;
  void clear_datanode_id() ;
  const std::string& datanode_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datanode_id(Arg_&& arg, Args_... args);
  std::string* mutable_datanode_id();
  PROTOBUF_NODISCARD std::string* release_datanode_id();
  void set_allocated_datanode_id(std::string* value);

  private:
  const std::string& _internal_datanode_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datanode_id(
      const std::string& value);
  std::string* _internal_mutable_datanode_id();

  public:
  // string ip_address = 2;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* value);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // int32 port = 3;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.RegisterDataNodeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterDataNodeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr datanode_id_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    ::int32_t port_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class PutFileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.PutFileRequest) */ {
 public:
  inline PutFileRequest() : PutFileRequest(nullptr) {}
  ~PutFileRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PutFileRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PutFileRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PutFileRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PutFileRequest(const PutFileRequest& from) : PutFileRequest(nullptr, from) {}
  inline PutFileRequest(PutFileRequest&& from) noexcept
      : PutFileRequest(nullptr, std::move(from)) {}
  inline PutFileRequest& operator=(const PutFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutFileRequest& operator=(PutFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutFileRequest* internal_default_instance() {
    return reinterpret_cast<const PutFileRequest*>(
        &_PutFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PutFileRequest& a, PutFileRequest& b) { a.Swap(&b); }
  inline void Swap(PutFileRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutFileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutFileRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PutFileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutFileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PutFileRequest& from) { PutFileRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PutFileRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.PutFileRequest"; }

 protected:
  explicit PutFileRequest(::google::protobuf::Arena* arena);
  PutFileRequest(::google::protobuf::Arena* arena, const PutFileRequest& from);
  PutFileRequest(::google::protobuf::Arena* arena, PutFileRequest&& from) noexcept
      : PutFileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kFilesizeFieldNumber = 4,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string filename = 3;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int64 filesize = 4;
  void clear_filesize() ;
  ::int64_t filesize() const;
  void set_filesize(::int64_t value);

  private:
  ::int64_t _internal_filesize() const;
  void _internal_set_filesize(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.PutFileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PutFileRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int64_t filesize_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class ListFilesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.ListFilesResponse) */ {
 public:
  inline ListFilesResponse() : ListFilesResponse(nullptr) {}
  ~ListFilesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListFilesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListFilesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListFilesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListFilesResponse(const ListFilesResponse& from) : ListFilesResponse(nullptr, from) {}
  inline ListFilesResponse(ListFilesResponse&& from) noexcept
      : ListFilesResponse(nullptr, std::move(from)) {}
  inline ListFilesResponse& operator=(const ListFilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFilesResponse& operator=(ListFilesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFilesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFilesResponse* internal_default_instance() {
    return reinterpret_cast<const ListFilesResponse*>(
        &_ListFilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ListFilesResponse& a, ListFilesResponse& b) { a.Swap(&b); }
  inline void Swap(ListFilesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFilesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFilesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ListFilesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListFilesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListFilesResponse& from) { ListFilesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ListFilesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.ListFilesResponse"; }

 protected:
  explicit ListFilesResponse(::google::protobuf::Arena* arena);
  ListFilesResponse(::google::protobuf::Arena* arena, const ListFilesResponse& from);
  ListFilesResponse(::google::protobuf::Arena* arena, ListFilesResponse&& from) noexcept
      : ListFilesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenamesFieldNumber = 1,
  };
  // repeated string filenames = 1;
  int filenames_size() const;
  private:
  int _internal_filenames_size() const;

  public:
  void clear_filenames() ;
  const std::string& filenames(int index) const;
  std::string* mutable_filenames(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filenames(int index, Arg_&& value, Args_... args);
  std::string* add_filenames();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_filenames(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& filenames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_filenames();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_filenames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_filenames();

  public:
  // @@protoc_insertion_point(class_scope:dfs.ListFilesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListFilesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> filenames_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class ListFilesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.ListFilesRequest) */ {
 public:
  inline ListFilesRequest() : ListFilesRequest(nullptr) {}
  ~ListFilesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListFilesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListFilesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListFilesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListFilesRequest(const ListFilesRequest& from) : ListFilesRequest(nullptr, from) {}
  inline ListFilesRequest(ListFilesRequest&& from) noexcept
      : ListFilesRequest(nullptr, std::move(from)) {}
  inline ListFilesRequest& operator=(const ListFilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFilesRequest& operator=(ListFilesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFilesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFilesRequest* internal_default_instance() {
    return reinterpret_cast<const ListFilesRequest*>(
        &_ListFilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ListFilesRequest& a, ListFilesRequest& b) { a.Swap(&b); }
  inline void Swap(ListFilesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFilesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFilesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ListFilesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListFilesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListFilesRequest& from) { ListFilesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ListFilesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.ListFilesRequest"; }

 protected:
  explicit ListFilesRequest(::google::protobuf::Arena* arena);
  ListFilesRequest(::google::protobuf::Arena* arena, const ListFilesRequest& from);
  ListFilesRequest(::google::protobuf::Arena* arena, ListFilesRequest&& from) noexcept
      : ListFilesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:dfs.ListFilesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListFilesRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.HeartbeatResponse) */ {
 public:
  inline HeartbeatResponse() : HeartbeatResponse(nullptr) {}
  ~HeartbeatResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeartbeatResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeartbeatResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeartbeatResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeartbeatResponse(const HeartbeatResponse& from) : HeartbeatResponse(nullptr, from) {}
  inline HeartbeatResponse(HeartbeatResponse&& from) noexcept
      : HeartbeatResponse(nullptr, std::move(from)) {}
  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
        &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) { a.Swap(&b); }
  inline void Swap(HeartbeatResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeartbeatResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeartbeatResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeartbeatResponse& from) { HeartbeatResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeartbeatResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.HeartbeatResponse"; }

 protected:
  explicit HeartbeatResponse(::google::protobuf::Arena* arena);
  HeartbeatResponse(::google::protobuf::Arena* arena, const HeartbeatResponse& from);
  HeartbeatResponse(::google::protobuf::Arena* arena, HeartbeatResponse&& from) noexcept
      : HeartbeatResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.HeartbeatResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeartbeatResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.HeartbeatRequest) */ {
 public:
  inline HeartbeatRequest() : HeartbeatRequest(nullptr) {}
  ~HeartbeatRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeartbeatRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeartbeatRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeartbeatRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeartbeatRequest(const HeartbeatRequest& from) : HeartbeatRequest(nullptr, from) {}
  inline HeartbeatRequest(HeartbeatRequest&& from) noexcept
      : HeartbeatRequest(nullptr, std::move(from)) {}
  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
        &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) { a.Swap(&b); }
  inline void Swap(HeartbeatRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeartbeatRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeartbeatRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeartbeatRequest& from) { HeartbeatRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeartbeatRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.HeartbeatRequest"; }

 protected:
  explicit HeartbeatRequest(::google::protobuf::Arena* arena);
  HeartbeatRequest(::google::protobuf::Arena* arena, const HeartbeatRequest& from);
  HeartbeatRequest(::google::protobuf::Arena* arena, HeartbeatRequest&& from) noexcept
      : HeartbeatRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDatanodeIdFieldNumber = 1,
  };
  // string datanode_id = 1;
  void clear_datanode_id() ;
  const std::string& datanode_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datanode_id(Arg_&& arg, Args_... args);
  std::string* mutable_datanode_id();
  PROTOBUF_NODISCARD std::string* release_datanode_id();
  void set_allocated_datanode_id(std::string* value);

  private:
  const std::string& _internal_datanode_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datanode_id(
      const std::string& value);
  std::string* _internal_mutable_datanode_id();

  public:
  // @@protoc_insertion_point(class_scope:dfs.HeartbeatRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeartbeatRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr datanode_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class GetFileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.GetFileRequest) */ {
 public:
  inline GetFileRequest() : GetFileRequest(nullptr) {}
  ~GetFileRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetFileRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetFileRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetFileRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetFileRequest(const GetFileRequest& from) : GetFileRequest(nullptr, from) {}
  inline GetFileRequest(GetFileRequest&& from) noexcept
      : GetFileRequest(nullptr, std::move(from)) {}
  inline GetFileRequest& operator=(const GetFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileRequest& operator=(GetFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileRequest*>(
        &_GetFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GetFileRequest& a, GetFileRequest& b) { a.Swap(&b); }
  inline void Swap(GetFileRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFileRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetFileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetFileRequest& from) { GetFileRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetFileRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.GetFileRequest"; }

 protected:
  explicit GetFileRequest(::google::protobuf::Arena* arena);
  GetFileRequest(::google::protobuf::Arena* arena, const GetFileRequest& from);
  GetFileRequest(::google::protobuf::Arena* arena, GetFileRequest&& from) noexcept
      : GetFileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kFilenameFieldNumber = 3,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string filename = 3;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:dfs.GetFileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetFileRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class BlockUploadResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.BlockUploadResponse) */ {
 public:
  inline BlockUploadResponse() : BlockUploadResponse(nullptr) {}
  ~BlockUploadResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockUploadResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockUploadResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockUploadResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockUploadResponse(const BlockUploadResponse& from) : BlockUploadResponse(nullptr, from) {}
  inline BlockUploadResponse(BlockUploadResponse&& from) noexcept
      : BlockUploadResponse(nullptr, std::move(from)) {}
  inline BlockUploadResponse& operator=(const BlockUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockUploadResponse& operator=(BlockUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockUploadResponse* internal_default_instance() {
    return reinterpret_cast<const BlockUploadResponse*>(
        &_BlockUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(BlockUploadResponse& a, BlockUploadResponse& b) { a.Swap(&b); }
  inline void Swap(BlockUploadResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockUploadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockUploadResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockUploadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockUploadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockUploadResponse& from) { BlockUploadResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockUploadResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.BlockUploadResponse"; }

 protected:
  explicit BlockUploadResponse(::google::protobuf::Arena* arena);
  BlockUploadResponse(::google::protobuf::Arena* arena, const BlockUploadResponse& from);
  BlockUploadResponse(::google::protobuf::Arena* arena, BlockUploadResponse&& from) noexcept
      : BlockUploadResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.BlockUploadResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockUploadResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class BlockUploadRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.BlockUploadRequest) */ {
 public:
  inline BlockUploadRequest() : BlockUploadRequest(nullptr) {}
  ~BlockUploadRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockUploadRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockUploadRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockUploadRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockUploadRequest(const BlockUploadRequest& from) : BlockUploadRequest(nullptr, from) {}
  inline BlockUploadRequest(BlockUploadRequest&& from) noexcept
      : BlockUploadRequest(nullptr, std::move(from)) {}
  inline BlockUploadRequest& operator=(const BlockUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockUploadRequest& operator=(BlockUploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockUploadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockUploadRequest* internal_default_instance() {
    return reinterpret_cast<const BlockUploadRequest*>(
        &_BlockUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(BlockUploadRequest& a, BlockUploadRequest& b) { a.Swap(&b); }
  inline void Swap(BlockUploadRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockUploadRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockUploadRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockUploadRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockUploadRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockUploadRequest& from) { BlockUploadRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockUploadRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.BlockUploadRequest"; }

 protected:
  explicit BlockUploadRequest(::google::protobuf::Arena* arena);
  BlockUploadRequest(::google::protobuf::Arena* arena, const BlockUploadRequest& from);
  BlockUploadRequest(::google::protobuf::Arena* arena, BlockUploadRequest&& from) noexcept
      : BlockUploadRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 2,
    kDataFieldNumber = 3,
    kBlockIdFieldNumber = 1,
  };
  // string filename = 2;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // bytes data = 3;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // int64 block_id = 1;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.BlockUploadRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockUploadRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::int64_t block_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class BlockReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.BlockReport) */ {
 public:
  inline BlockReport() : BlockReport(nullptr) {}
  ~BlockReport() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockReport* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockReport));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockReport(const BlockReport& from) : BlockReport(nullptr, from) {}
  inline BlockReport(BlockReport&& from) noexcept
      : BlockReport(nullptr, std::move(from)) {}
  inline BlockReport& operator=(const BlockReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockReport& operator=(BlockReport&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockReport* internal_default_instance() {
    return reinterpret_cast<const BlockReport*>(
        &_BlockReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(BlockReport& a, BlockReport& b) { a.Swap(&b); }
  inline void Swap(BlockReport* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockReport* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockReport& from) { BlockReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockReport* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.BlockReport"; }

 protected:
  explicit BlockReport(::google::protobuf::Arena* arena);
  BlockReport(::google::protobuf::Arena* arena, const BlockReport& from);
  BlockReport(::google::protobuf::Arena* arena, BlockReport&& from) noexcept
      : BlockReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 2,
    kBlockIdFieldNumber = 1,
  };
  // string filename = 2;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int64 block_id = 1;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.BlockReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockReport& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int64_t block_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class BlockReplicationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.BlockReplicationResponse) */ {
 public:
  inline BlockReplicationResponse() : BlockReplicationResponse(nullptr) {}
  ~BlockReplicationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockReplicationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockReplicationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockReplicationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockReplicationResponse(const BlockReplicationResponse& from) : BlockReplicationResponse(nullptr, from) {}
  inline BlockReplicationResponse(BlockReplicationResponse&& from) noexcept
      : BlockReplicationResponse(nullptr, std::move(from)) {}
  inline BlockReplicationResponse& operator=(const BlockReplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockReplicationResponse& operator=(BlockReplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockReplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockReplicationResponse* internal_default_instance() {
    return reinterpret_cast<const BlockReplicationResponse*>(
        &_BlockReplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(BlockReplicationResponse& a, BlockReplicationResponse& b) { a.Swap(&b); }
  inline void Swap(BlockReplicationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockReplicationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockReplicationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockReplicationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockReplicationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockReplicationResponse& from) { BlockReplicationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockReplicationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.BlockReplicationResponse"; }

 protected:
  explicit BlockReplicationResponse(::google::protobuf::Arena* arena);
  BlockReplicationResponse(::google::protobuf::Arena* arena, const BlockReplicationResponse& from);
  BlockReplicationResponse(::google::protobuf::Arena* arena, BlockReplicationResponse&& from) noexcept
      : BlockReplicationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.BlockReplicationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockReplicationResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class BlockReplicationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.BlockReplicationRequest) */ {
 public:
  inline BlockReplicationRequest() : BlockReplicationRequest(nullptr) {}
  ~BlockReplicationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockReplicationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockReplicationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockReplicationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockReplicationRequest(const BlockReplicationRequest& from) : BlockReplicationRequest(nullptr, from) {}
  inline BlockReplicationRequest(BlockReplicationRequest&& from) noexcept
      : BlockReplicationRequest(nullptr, std::move(from)) {}
  inline BlockReplicationRequest& operator=(const BlockReplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockReplicationRequest& operator=(BlockReplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockReplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockReplicationRequest* internal_default_instance() {
    return reinterpret_cast<const BlockReplicationRequest*>(
        &_BlockReplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(BlockReplicationRequest& a, BlockReplicationRequest& b) { a.Swap(&b); }
  inline void Swap(BlockReplicationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockReplicationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockReplicationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockReplicationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockReplicationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockReplicationRequest& from) { BlockReplicationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockReplicationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.BlockReplicationRequest"; }

 protected:
  explicit BlockReplicationRequest(::google::protobuf::Arena* arena);
  BlockReplicationRequest(::google::protobuf::Arena* arena, const BlockReplicationRequest& from);
  BlockReplicationRequest(::google::protobuf::Arena* arena, BlockReplicationRequest&& from) noexcept
      : BlockReplicationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 2,
    kDataFieldNumber = 3,
    kBlockIdFieldNumber = 1,
  };
  // string filename = 2;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // bytes data = 3;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // int64 block_id = 1;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.BlockReplicationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockReplicationRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::int64_t block_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class BlockLocation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.BlockLocation) */ {
 public:
  inline BlockLocation() : BlockLocation(nullptr) {}
  ~BlockLocation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockLocation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockLocation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockLocation(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockLocation(const BlockLocation& from) : BlockLocation(nullptr, from) {}
  inline BlockLocation(BlockLocation&& from) noexcept
      : BlockLocation(nullptr, std::move(from)) {}
  inline BlockLocation& operator=(const BlockLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockLocation& operator=(BlockLocation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockLocation* internal_default_instance() {
    return reinterpret_cast<const BlockLocation*>(
        &_BlockLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(BlockLocation& a, BlockLocation& b) { a.Swap(&b); }
  inline void Swap(BlockLocation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockLocation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockLocation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockLocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockLocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockLocation& from) { BlockLocation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockLocation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.BlockLocation"; }

 protected:
  explicit BlockLocation(::google::protobuf::Arena* arena);
  BlockLocation(::google::protobuf::Arena* arena, const BlockLocation& from);
  BlockLocation(::google::protobuf::Arena* arena, BlockLocation&& from) noexcept
      : BlockLocation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReplicaAddressesFieldNumber = 3,
    kPrimaryAddressFieldNumber = 2,
    kBlockIdFieldNumber = 1,
  };
  // repeated string replica_addresses = 3;
  int replica_addresses_size() const;
  private:
  int _internal_replica_addresses_size() const;

  public:
  void clear_replica_addresses() ;
  const std::string& replica_addresses(int index) const;
  std::string* mutable_replica_addresses(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_replica_addresses(int index, Arg_&& value, Args_... args);
  std::string* add_replica_addresses();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_replica_addresses(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& replica_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_replica_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_replica_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_replica_addresses();

  public:
  // string primary_address = 2;
  void clear_primary_address() ;
  const std::string& primary_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_address(Arg_&& arg, Args_... args);
  std::string* mutable_primary_address();
  PROTOBUF_NODISCARD std::string* release_primary_address();
  void set_allocated_primary_address(std::string* value);

  private:
  const std::string& _internal_primary_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_address(
      const std::string& value);
  std::string* _internal_mutable_primary_address();

  public:
  // int64 block_id = 1;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.BlockLocation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockLocation& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> replica_addresses_;
    ::google::protobuf::internal::ArenaStringPtr primary_address_;
    ::int64_t block_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class BlockDownloadResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.BlockDownloadResponse) */ {
 public:
  inline BlockDownloadResponse() : BlockDownloadResponse(nullptr) {}
  ~BlockDownloadResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockDownloadResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockDownloadResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockDownloadResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockDownloadResponse(const BlockDownloadResponse& from) : BlockDownloadResponse(nullptr, from) {}
  inline BlockDownloadResponse(BlockDownloadResponse&& from) noexcept
      : BlockDownloadResponse(nullptr, std::move(from)) {}
  inline BlockDownloadResponse& operator=(const BlockDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDownloadResponse& operator=(BlockDownloadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockDownloadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const BlockDownloadResponse*>(
        &_BlockDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(BlockDownloadResponse& a, BlockDownloadResponse& b) { a.Swap(&b); }
  inline void Swap(BlockDownloadResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockDownloadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockDownloadResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockDownloadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockDownloadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockDownloadResponse& from) { BlockDownloadResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockDownloadResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.BlockDownloadResponse"; }

 protected:
  explicit BlockDownloadResponse(::google::protobuf::Arena* arena);
  BlockDownloadResponse(::google::protobuf::Arena* arena, const BlockDownloadResponse& from);
  BlockDownloadResponse(::google::protobuf::Arena* arena, BlockDownloadResponse&& from) noexcept
      : BlockDownloadResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:dfs.BlockDownloadResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockDownloadResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class BlockDownloadRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.BlockDownloadRequest) */ {
 public:
  inline BlockDownloadRequest() : BlockDownloadRequest(nullptr) {}
  ~BlockDownloadRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockDownloadRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockDownloadRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockDownloadRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockDownloadRequest(const BlockDownloadRequest& from) : BlockDownloadRequest(nullptr, from) {}
  inline BlockDownloadRequest(BlockDownloadRequest&& from) noexcept
      : BlockDownloadRequest(nullptr, std::move(from)) {}
  inline BlockDownloadRequest& operator=(const BlockDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDownloadRequest& operator=(BlockDownloadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockDownloadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const BlockDownloadRequest*>(
        &_BlockDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(BlockDownloadRequest& a, BlockDownloadRequest& b) { a.Swap(&b); }
  inline void Swap(BlockDownloadRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockDownloadRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockDownloadRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockDownloadRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockDownloadRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockDownloadRequest& from) { BlockDownloadRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockDownloadRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.BlockDownloadRequest"; }

 protected:
  explicit BlockDownloadRequest(::google::protobuf::Arena* arena);
  BlockDownloadRequest(::google::protobuf::Arena* arena, const BlockDownloadRequest& from);
  BlockDownloadRequest(::google::protobuf::Arena* arena, BlockDownloadRequest&& from) noexcept
      : BlockDownloadRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 2,
    kBlockIdFieldNumber = 1,
  };
  // string filename = 2;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int64 block_id = 1;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dfs.BlockDownloadRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockDownloadRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int64_t block_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class ReportBlockRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.ReportBlockRequest) */ {
 public:
  inline ReportBlockRequest() : ReportBlockRequest(nullptr) {}
  ~ReportBlockRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReportBlockRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReportBlockRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReportBlockRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReportBlockRequest(const ReportBlockRequest& from) : ReportBlockRequest(nullptr, from) {}
  inline ReportBlockRequest(ReportBlockRequest&& from) noexcept
      : ReportBlockRequest(nullptr, std::move(from)) {}
  inline ReportBlockRequest& operator=(const ReportBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportBlockRequest& operator=(ReportBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportBlockRequest* internal_default_instance() {
    return reinterpret_cast<const ReportBlockRequest*>(
        &_ReportBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(ReportBlockRequest& a, ReportBlockRequest& b) { a.Swap(&b); }
  inline void Swap(ReportBlockRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportBlockRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportBlockRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReportBlockRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportBlockRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReportBlockRequest& from) { ReportBlockRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReportBlockRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.ReportBlockRequest"; }

 protected:
  explicit ReportBlockRequest(::google::protobuf::Arena* arena);
  ReportBlockRequest(::google::protobuf::Arena* arena, const ReportBlockRequest& from);
  ReportBlockRequest(::google::protobuf::Arena* arena, ReportBlockRequest&& from) noexcept
      : ReportBlockRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlocksFieldNumber = 2,
    kDatanodeIdFieldNumber = 1,
  };
  // repeated .dfs.BlockReport blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;

  public:
  void clear_blocks() ;
  ::dfs::BlockReport* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField<::dfs::BlockReport>* mutable_blocks();

  private:
  const ::google::protobuf::RepeatedPtrField<::dfs::BlockReport>& _internal_blocks() const;
  ::google::protobuf::RepeatedPtrField<::dfs::BlockReport>* _internal_mutable_blocks();
  public:
  const ::dfs::BlockReport& blocks(int index) const;
  ::dfs::BlockReport* add_blocks();
  const ::google::protobuf::RepeatedPtrField<::dfs::BlockReport>& blocks() const;
  // string datanode_id = 1;
  void clear_datanode_id() ;
  const std::string& datanode_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_datanode_id(Arg_&& arg, Args_... args);
  std::string* mutable_datanode_id();
  PROTOBUF_NODISCARD std::string* release_datanode_id();
  void set_allocated_datanode_id(std::string* value);

  private:
  const std::string& _internal_datanode_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datanode_id(
      const std::string& value);
  std::string* _internal_mutable_datanode_id();

  public:
  // @@protoc_insertion_point(class_scope:dfs.ReportBlockRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReportBlockRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::dfs::BlockReport > blocks_;
    ::google::protobuf::internal::ArenaStringPtr datanode_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class PutFileResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.PutFileResponse) */ {
 public:
  inline PutFileResponse() : PutFileResponse(nullptr) {}
  ~PutFileResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PutFileResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PutFileResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PutFileResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PutFileResponse(const PutFileResponse& from) : PutFileResponse(nullptr, from) {}
  inline PutFileResponse(PutFileResponse&& from) noexcept
      : PutFileResponse(nullptr, std::move(from)) {}
  inline PutFileResponse& operator=(const PutFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutFileResponse& operator=(PutFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutFileResponse* internal_default_instance() {
    return reinterpret_cast<const PutFileResponse*>(
        &_PutFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PutFileResponse& a, PutFileResponse& b) { a.Swap(&b); }
  inline void Swap(PutFileResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutFileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutFileResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PutFileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutFileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PutFileResponse& from) { PutFileResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PutFileResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.PutFileResponse"; }

 protected:
  explicit PutFileResponse(::google::protobuf::Arena* arena);
  PutFileResponse(::google::protobuf::Arena* arena, const PutFileResponse& from);
  PutFileResponse(::google::protobuf::Arena* arena, PutFileResponse&& from) noexcept
      : PutFileResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .dfs.BlockLocation blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;

  public:
  void clear_blocks() ;
  ::dfs::BlockLocation* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>* mutable_blocks();

  private:
  const ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>& _internal_blocks() const;
  ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>* _internal_mutable_blocks();
  public:
  const ::dfs::BlockLocation& blocks(int index) const;
  ::dfs::BlockLocation* add_blocks();
  const ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>& blocks() const;
  // @@protoc_insertion_point(class_scope:dfs.PutFileResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PutFileResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::dfs::BlockLocation > blocks_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};
// -------------------------------------------------------------------

class GetFileResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:dfs.GetFileResponse) */ {
 public:
  inline GetFileResponse() : GetFileResponse(nullptr) {}
  ~GetFileResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetFileResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetFileResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetFileResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetFileResponse(const GetFileResponse& from) : GetFileResponse(nullptr, from) {}
  inline GetFileResponse(GetFileResponse&& from) noexcept
      : GetFileResponse(nullptr, std::move(from)) {}
  inline GetFileResponse& operator=(const GetFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileResponse& operator=(GetFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileResponse*>(
        &_GetFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GetFileResponse& a, GetFileResponse& b) { a.Swap(&b); }
  inline void Swap(GetFileResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFileResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetFileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetFileResponse& from) { GetFileResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetFileResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "dfs.GetFileResponse"; }

 protected:
  explicit GetFileResponse(::google::protobuf::Arena* arena);
  GetFileResponse(::google::protobuf::Arena* arena, const GetFileResponse& from);
  GetFileResponse(::google::protobuf::Arena* arena, GetFileResponse&& from) noexcept
      : GetFileResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .dfs.BlockLocation blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;

  public:
  void clear_blocks() ;
  ::dfs::BlockLocation* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>* mutable_blocks();

  private:
  const ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>& _internal_blocks() const;
  ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>* _internal_mutable_blocks();
  public:
  const ::dfs::BlockLocation& blocks(int index) const;
  ::dfs::BlockLocation* add_blocks();
  const ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>& blocks() const;
  // @@protoc_insertion_point(class_scope:dfs.GetFileResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetFileResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::dfs::BlockLocation > blocks_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dfs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PutFileRequest

// string username = 1;
inline void PutFileRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& PutFileRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.PutFileRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutFileRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.PutFileRequest.username)
}
inline std::string* PutFileRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dfs.PutFileRequest.username)
  return _s;
}
inline const std::string& PutFileRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void PutFileRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* PutFileRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* PutFileRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.PutFileRequest.username)
  return _impl_.username_.Release();
}
inline void PutFileRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.PutFileRequest.username)
}

// string password = 2;
inline void PutFileRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& PutFileRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.PutFileRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutFileRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.PutFileRequest.password)
}
inline std::string* PutFileRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:dfs.PutFileRequest.password)
  return _s;
}
inline const std::string& PutFileRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void PutFileRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* PutFileRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* PutFileRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.PutFileRequest.password)
  return _impl_.password_.Release();
}
inline void PutFileRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.PutFileRequest.password)
}

// string filename = 3;
inline void PutFileRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& PutFileRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.PutFileRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PutFileRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.PutFileRequest.filename)
}
inline std::string* PutFileRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:dfs.PutFileRequest.filename)
  return _s;
}
inline const std::string& PutFileRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void PutFileRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* PutFileRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* PutFileRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.PutFileRequest.filename)
  return _impl_.filename_.Release();
}
inline void PutFileRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.PutFileRequest.filename)
}

// int64 filesize = 4;
inline void PutFileRequest::clear_filesize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filesize_ = ::int64_t{0};
}
inline ::int64_t PutFileRequest::filesize() const {
  // @@protoc_insertion_point(field_get:dfs.PutFileRequest.filesize)
  return _internal_filesize();
}
inline void PutFileRequest::set_filesize(::int64_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:dfs.PutFileRequest.filesize)
}
inline ::int64_t PutFileRequest::_internal_filesize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filesize_;
}
inline void PutFileRequest::_internal_set_filesize(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filesize_ = value;
}

// -------------------------------------------------------------------

// PutFileResponse

// repeated .dfs.BlockLocation blocks = 1;
inline int PutFileResponse::_internal_blocks_size() const {
  return _internal_blocks().size();
}
inline int PutFileResponse::blocks_size() const {
  return _internal_blocks_size();
}
inline void PutFileResponse::clear_blocks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocks_.Clear();
}
inline ::dfs::BlockLocation* PutFileResponse::mutable_blocks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dfs.PutFileResponse.blocks)
  return _internal_mutable_blocks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>* PutFileResponse::mutable_blocks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dfs.PutFileResponse.blocks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocks();
}
inline const ::dfs::BlockLocation& PutFileResponse::blocks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.PutFileResponse.blocks)
  return _internal_blocks().Get(index);
}
inline ::dfs::BlockLocation* PutFileResponse::add_blocks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::dfs::BlockLocation* _add = _internal_mutable_blocks()->Add();
  // @@protoc_insertion_point(field_add:dfs.PutFileResponse.blocks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>& PutFileResponse::blocks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dfs.PutFileResponse.blocks)
  return _internal_blocks();
}
inline const ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>&
PutFileResponse::_internal_blocks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocks_;
}
inline ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>*
PutFileResponse::_internal_mutable_blocks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocks_;
}

// -------------------------------------------------------------------

// GetFileRequest

// string username = 1;
inline void GetFileRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& GetFileRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.GetFileRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFileRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.GetFileRequest.username)
}
inline std::string* GetFileRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dfs.GetFileRequest.username)
  return _s;
}
inline const std::string& GetFileRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void GetFileRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* GetFileRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* GetFileRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.GetFileRequest.username)
  return _impl_.username_.Release();
}
inline void GetFileRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.GetFileRequest.username)
}

// string password = 2;
inline void GetFileRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& GetFileRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.GetFileRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFileRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.GetFileRequest.password)
}
inline std::string* GetFileRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:dfs.GetFileRequest.password)
  return _s;
}
inline const std::string& GetFileRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void GetFileRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* GetFileRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* GetFileRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.GetFileRequest.password)
  return _impl_.password_.Release();
}
inline void GetFileRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.GetFileRequest.password)
}

// string filename = 3;
inline void GetFileRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& GetFileRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.GetFileRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFileRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.GetFileRequest.filename)
}
inline std::string* GetFileRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:dfs.GetFileRequest.filename)
  return _s;
}
inline const std::string& GetFileRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void GetFileRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* GetFileRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* GetFileRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.GetFileRequest.filename)
  return _impl_.filename_.Release();
}
inline void GetFileRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.GetFileRequest.filename)
}

// -------------------------------------------------------------------

// GetFileResponse

// repeated .dfs.BlockLocation blocks = 1;
inline int GetFileResponse::_internal_blocks_size() const {
  return _internal_blocks().size();
}
inline int GetFileResponse::blocks_size() const {
  return _internal_blocks_size();
}
inline void GetFileResponse::clear_blocks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocks_.Clear();
}
inline ::dfs::BlockLocation* GetFileResponse::mutable_blocks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dfs.GetFileResponse.blocks)
  return _internal_mutable_blocks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>* GetFileResponse::mutable_blocks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dfs.GetFileResponse.blocks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocks();
}
inline const ::dfs::BlockLocation& GetFileResponse::blocks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.GetFileResponse.blocks)
  return _internal_blocks().Get(index);
}
inline ::dfs::BlockLocation* GetFileResponse::add_blocks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::dfs::BlockLocation* _add = _internal_mutable_blocks()->Add();
  // @@protoc_insertion_point(field_add:dfs.GetFileResponse.blocks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>& GetFileResponse::blocks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dfs.GetFileResponse.blocks)
  return _internal_blocks();
}
inline const ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>&
GetFileResponse::_internal_blocks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocks_;
}
inline ::google::protobuf::RepeatedPtrField<::dfs::BlockLocation>*
GetFileResponse::_internal_mutable_blocks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocks_;
}

// -------------------------------------------------------------------

// ListFilesRequest

// string username = 1;
inline void ListFilesRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& ListFilesRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.ListFilesRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListFilesRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.ListFilesRequest.username)
}
inline std::string* ListFilesRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dfs.ListFilesRequest.username)
  return _s;
}
inline const std::string& ListFilesRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void ListFilesRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* ListFilesRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* ListFilesRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.ListFilesRequest.username)
  return _impl_.username_.Release();
}
inline void ListFilesRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.ListFilesRequest.username)
}

// string password = 2;
inline void ListFilesRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& ListFilesRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.ListFilesRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListFilesRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.ListFilesRequest.password)
}
inline std::string* ListFilesRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:dfs.ListFilesRequest.password)
  return _s;
}
inline const std::string& ListFilesRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void ListFilesRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* ListFilesRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* ListFilesRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.ListFilesRequest.password)
  return _impl_.password_.Release();
}
inline void ListFilesRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.ListFilesRequest.password)
}

// -------------------------------------------------------------------

// ListFilesResponse

// repeated string filenames = 1;
inline int ListFilesResponse::_internal_filenames_size() const {
  return _internal_filenames().size();
}
inline int ListFilesResponse::filenames_size() const {
  return _internal_filenames_size();
}
inline void ListFilesResponse::clear_filenames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filenames_.Clear();
}
inline std::string* ListFilesResponse::add_filenames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_filenames()->Add();
  // @@protoc_insertion_point(field_add_mutable:dfs.ListFilesResponse.filenames)
  return _s;
}
inline const std::string& ListFilesResponse::filenames(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.ListFilesResponse.filenames)
  return _internal_filenames().Get(index);
}
inline std::string* ListFilesResponse::mutable_filenames(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dfs.ListFilesResponse.filenames)
  return _internal_mutable_filenames()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ListFilesResponse::set_filenames(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_filenames()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:dfs.ListFilesResponse.filenames)
}
template <typename Arg_, typename... Args_>
inline void ListFilesResponse::add_filenames(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_filenames(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:dfs.ListFilesResponse.filenames)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListFilesResponse::filenames() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dfs.ListFilesResponse.filenames)
  return _internal_filenames();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListFilesResponse::mutable_filenames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dfs.ListFilesResponse.filenames)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filenames();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListFilesResponse::_internal_filenames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filenames_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListFilesResponse::_internal_mutable_filenames() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filenames_;
}

// -------------------------------------------------------------------

// RemoveFileRequest

// string username = 1;
inline void RemoveFileRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& RemoveFileRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.RemoveFileRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveFileRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.RemoveFileRequest.username)
}
inline std::string* RemoveFileRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:dfs.RemoveFileRequest.username)
  return _s;
}
inline const std::string& RemoveFileRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void RemoveFileRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* RemoveFileRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* RemoveFileRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.RemoveFileRequest.username)
  return _impl_.username_.Release();
}
inline void RemoveFileRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.RemoveFileRequest.username)
}

// string password = 2;
inline void RemoveFileRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& RemoveFileRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.RemoveFileRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveFileRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.RemoveFileRequest.password)
}
inline std::string* RemoveFileRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:dfs.RemoveFileRequest.password)
  return _s;
}
inline const std::string& RemoveFileRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void RemoveFileRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* RemoveFileRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* RemoveFileRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.RemoveFileRequest.password)
  return _impl_.password_.Release();
}
inline void RemoveFileRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.RemoveFileRequest.password)
}

// string filename = 3;
inline void RemoveFileRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& RemoveFileRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.RemoveFileRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveFileRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.RemoveFileRequest.filename)
}
inline std::string* RemoveFileRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:dfs.RemoveFileRequest.filename)
  return _s;
}
inline const std::string& RemoveFileRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void RemoveFileRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* RemoveFileRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* RemoveFileRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.RemoveFileRequest.filename)
  return _impl_.filename_.Release();
}
inline void RemoveFileRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.RemoveFileRequest.filename)
}

// -------------------------------------------------------------------

// RemoveFileResponse

// bool success = 1;
inline void RemoveFileResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool RemoveFileResponse::success() const {
  // @@protoc_insertion_point(field_get:dfs.RemoveFileResponse.success)
  return _internal_success();
}
inline void RemoveFileResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:dfs.RemoveFileResponse.success)
}
inline bool RemoveFileResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void RemoveFileResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void RemoveFileResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RemoveFileResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.RemoveFileResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveFileResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.RemoveFileResponse.message)
}
inline std::string* RemoveFileResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:dfs.RemoveFileResponse.message)
  return _s;
}
inline const std::string& RemoveFileResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void RemoveFileResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* RemoveFileResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* RemoveFileResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.RemoveFileResponse.message)
  return _impl_.message_.Release();
}
inline void RemoveFileResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.RemoveFileResponse.message)
}

// -------------------------------------------------------------------

// ReplicaRequest

// int64 block_id = 1;
inline void ReplicaRequest::clear_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t ReplicaRequest::block_id() const {
  // @@protoc_insertion_point(field_get:dfs.ReplicaRequest.block_id)
  return _internal_block_id();
}
inline void ReplicaRequest::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:dfs.ReplicaRequest.block_id)
}
inline ::int64_t ReplicaRequest::_internal_block_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_id_;
}
inline void ReplicaRequest::_internal_set_block_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = value;
}

// -------------------------------------------------------------------

// ReplicaResponse

// repeated string replica_datanodes = 1;
inline int ReplicaResponse::_internal_replica_datanodes_size() const {
  return _internal_replica_datanodes().size();
}
inline int ReplicaResponse::replica_datanodes_size() const {
  return _internal_replica_datanodes_size();
}
inline void ReplicaResponse::clear_replica_datanodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.replica_datanodes_.Clear();
}
inline std::string* ReplicaResponse::add_replica_datanodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_replica_datanodes()->Add();
  // @@protoc_insertion_point(field_add_mutable:dfs.ReplicaResponse.replica_datanodes)
  return _s;
}
inline const std::string& ReplicaResponse::replica_datanodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.ReplicaResponse.replica_datanodes)
  return _internal_replica_datanodes().Get(index);
}
inline std::string* ReplicaResponse::mutable_replica_datanodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dfs.ReplicaResponse.replica_datanodes)
  return _internal_mutable_replica_datanodes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ReplicaResponse::set_replica_datanodes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_replica_datanodes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:dfs.ReplicaResponse.replica_datanodes)
}
template <typename Arg_, typename... Args_>
inline void ReplicaResponse::add_replica_datanodes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_replica_datanodes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:dfs.ReplicaResponse.replica_datanodes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReplicaResponse::replica_datanodes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dfs.ReplicaResponse.replica_datanodes)
  return _internal_replica_datanodes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReplicaResponse::mutable_replica_datanodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dfs.ReplicaResponse.replica_datanodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_replica_datanodes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ReplicaResponse::_internal_replica_datanodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.replica_datanodes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ReplicaResponse::_internal_mutable_replica_datanodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.replica_datanodes_;
}

// -------------------------------------------------------------------

// BlockUploadRequest

// int64 block_id = 1;
inline void BlockUploadRequest::clear_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t BlockUploadRequest::block_id() const {
  // @@protoc_insertion_point(field_get:dfs.BlockUploadRequest.block_id)
  return _internal_block_id();
}
inline void BlockUploadRequest::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:dfs.BlockUploadRequest.block_id)
}
inline ::int64_t BlockUploadRequest::_internal_block_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_id_;
}
inline void BlockUploadRequest::_internal_set_block_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = value;
}

// string filename = 2;
inline void BlockUploadRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& BlockUploadRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockUploadRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockUploadRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.BlockUploadRequest.filename)
}
inline std::string* BlockUploadRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:dfs.BlockUploadRequest.filename)
  return _s;
}
inline const std::string& BlockUploadRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void BlockUploadRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* BlockUploadRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* BlockUploadRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.BlockUploadRequest.filename)
  return _impl_.filename_.Release();
}
inline void BlockUploadRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.BlockUploadRequest.filename)
}

// bytes data = 3;
inline void BlockUploadRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BlockUploadRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockUploadRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockUploadRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.BlockUploadRequest.data)
}
inline std::string* BlockUploadRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dfs.BlockUploadRequest.data)
  return _s;
}
inline const std::string& BlockUploadRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void BlockUploadRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* BlockUploadRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* BlockUploadRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.BlockUploadRequest.data)
  return _impl_.data_.Release();
}
inline void BlockUploadRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.BlockUploadRequest.data)
}

// -------------------------------------------------------------------

// BlockUploadResponse

// bool success = 1;
inline void BlockUploadResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool BlockUploadResponse::success() const {
  // @@protoc_insertion_point(field_get:dfs.BlockUploadResponse.success)
  return _internal_success();
}
inline void BlockUploadResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:dfs.BlockUploadResponse.success)
}
inline bool BlockUploadResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void BlockUploadResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// BlockDownloadRequest

// int64 block_id = 1;
inline void BlockDownloadRequest::clear_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t BlockDownloadRequest::block_id() const {
  // @@protoc_insertion_point(field_get:dfs.BlockDownloadRequest.block_id)
  return _internal_block_id();
}
inline void BlockDownloadRequest::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:dfs.BlockDownloadRequest.block_id)
}
inline ::int64_t BlockDownloadRequest::_internal_block_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_id_;
}
inline void BlockDownloadRequest::_internal_set_block_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = value;
}

// string filename = 2;
inline void BlockDownloadRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& BlockDownloadRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockDownloadRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockDownloadRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.BlockDownloadRequest.filename)
}
inline std::string* BlockDownloadRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:dfs.BlockDownloadRequest.filename)
  return _s;
}
inline const std::string& BlockDownloadRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void BlockDownloadRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* BlockDownloadRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* BlockDownloadRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.BlockDownloadRequest.filename)
  return _impl_.filename_.Release();
}
inline void BlockDownloadRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.BlockDownloadRequest.filename)
}

// -------------------------------------------------------------------

// BlockDownloadResponse

// bytes data = 1;
inline void BlockDownloadResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BlockDownloadResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockDownloadResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockDownloadResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.BlockDownloadResponse.data)
}
inline std::string* BlockDownloadResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dfs.BlockDownloadResponse.data)
  return _s;
}
inline const std::string& BlockDownloadResponse::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void BlockDownloadResponse::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* BlockDownloadResponse::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* BlockDownloadResponse::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.BlockDownloadResponse.data)
  return _impl_.data_.Release();
}
inline void BlockDownloadResponse::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.BlockDownloadResponse.data)
}

// -------------------------------------------------------------------

// RegisterDataNodeRequest

// string datanode_id = 1;
inline void RegisterDataNodeRequest::clear_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.ClearToEmpty();
}
inline const std::string& RegisterDataNodeRequest::datanode_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.RegisterDataNodeRequest.datanode_id)
  return _internal_datanode_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterDataNodeRequest::set_datanode_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.RegisterDataNodeRequest.datanode_id)
}
inline std::string* RegisterDataNodeRequest::mutable_datanode_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datanode_id();
  // @@protoc_insertion_point(field_mutable:dfs.RegisterDataNodeRequest.datanode_id)
  return _s;
}
inline const std::string& RegisterDataNodeRequest::_internal_datanode_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datanode_id_.Get();
}
inline void RegisterDataNodeRequest::_internal_set_datanode_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.Set(value, GetArena());
}
inline std::string* RegisterDataNodeRequest::_internal_mutable_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datanode_id_.Mutable( GetArena());
}
inline std::string* RegisterDataNodeRequest::release_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.RegisterDataNodeRequest.datanode_id)
  return _impl_.datanode_id_.Release();
}
inline void RegisterDataNodeRequest::set_allocated_datanode_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datanode_id_.IsDefault()) {
    _impl_.datanode_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.RegisterDataNodeRequest.datanode_id)
}

// string ip_address = 2;
inline void RegisterDataNodeRequest::clear_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& RegisterDataNodeRequest::ip_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.RegisterDataNodeRequest.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterDataNodeRequest::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.RegisterDataNodeRequest.ip_address)
}
inline std::string* RegisterDataNodeRequest::mutable_ip_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:dfs.RegisterDataNodeRequest.ip_address)
  return _s;
}
inline const std::string& RegisterDataNodeRequest::_internal_ip_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_address_.Get();
}
inline void RegisterDataNodeRequest::_internal_set_ip_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.Set(value, GetArena());
}
inline std::string* RegisterDataNodeRequest::_internal_mutable_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_address_.Mutable( GetArena());
}
inline std::string* RegisterDataNodeRequest::release_ip_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.RegisterDataNodeRequest.ip_address)
  return _impl_.ip_address_.Release();
}
inline void RegisterDataNodeRequest::set_allocated_ip_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ip_address_.IsDefault()) {
    _impl_.ip_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.RegisterDataNodeRequest.ip_address)
}

// int32 port = 3;
inline void RegisterDataNodeRequest::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0;
}
inline ::int32_t RegisterDataNodeRequest::port() const {
  // @@protoc_insertion_point(field_get:dfs.RegisterDataNodeRequest.port)
  return _internal_port();
}
inline void RegisterDataNodeRequest::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dfs.RegisterDataNodeRequest.port)
}
inline ::int32_t RegisterDataNodeRequest::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void RegisterDataNodeRequest::_internal_set_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// RegisterDataNodeResponse

// bool success = 1;
inline void RegisterDataNodeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool RegisterDataNodeResponse::success() const {
  // @@protoc_insertion_point(field_get:dfs.RegisterDataNodeResponse.success)
  return _internal_success();
}
inline void RegisterDataNodeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:dfs.RegisterDataNodeResponse.success)
}
inline bool RegisterDataNodeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void RegisterDataNodeResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// HeartbeatRequest

// string datanode_id = 1;
inline void HeartbeatRequest::clear_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.ClearToEmpty();
}
inline const std::string& HeartbeatRequest::datanode_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.HeartbeatRequest.datanode_id)
  return _internal_datanode_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeartbeatRequest::set_datanode_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.HeartbeatRequest.datanode_id)
}
inline std::string* HeartbeatRequest::mutable_datanode_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datanode_id();
  // @@protoc_insertion_point(field_mutable:dfs.HeartbeatRequest.datanode_id)
  return _s;
}
inline const std::string& HeartbeatRequest::_internal_datanode_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datanode_id_.Get();
}
inline void HeartbeatRequest::_internal_set_datanode_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.Set(value, GetArena());
}
inline std::string* HeartbeatRequest::_internal_mutable_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datanode_id_.Mutable( GetArena());
}
inline std::string* HeartbeatRequest::release_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.HeartbeatRequest.datanode_id)
  return _impl_.datanode_id_.Release();
}
inline void HeartbeatRequest::set_allocated_datanode_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datanode_id_.IsDefault()) {
    _impl_.datanode_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.HeartbeatRequest.datanode_id)
}

// -------------------------------------------------------------------

// HeartbeatResponse

// bool success = 1;
inline void HeartbeatResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool HeartbeatResponse::success() const {
  // @@protoc_insertion_point(field_get:dfs.HeartbeatResponse.success)
  return _internal_success();
}
inline void HeartbeatResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:dfs.HeartbeatResponse.success)
}
inline bool HeartbeatResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void HeartbeatResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// ReportBlockRequest

// string datanode_id = 1;
inline void ReportBlockRequest::clear_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.ClearToEmpty();
}
inline const std::string& ReportBlockRequest::datanode_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.ReportBlockRequest.datanode_id)
  return _internal_datanode_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportBlockRequest::set_datanode_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.ReportBlockRequest.datanode_id)
}
inline std::string* ReportBlockRequest::mutable_datanode_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_datanode_id();
  // @@protoc_insertion_point(field_mutable:dfs.ReportBlockRequest.datanode_id)
  return _s;
}
inline const std::string& ReportBlockRequest::_internal_datanode_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.datanode_id_.Get();
}
inline void ReportBlockRequest::_internal_set_datanode_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.Set(value, GetArena());
}
inline std::string* ReportBlockRequest::_internal_mutable_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.datanode_id_.Mutable( GetArena());
}
inline std::string* ReportBlockRequest::release_datanode_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.ReportBlockRequest.datanode_id)
  return _impl_.datanode_id_.Release();
}
inline void ReportBlockRequest::set_allocated_datanode_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datanode_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.datanode_id_.IsDefault()) {
    _impl_.datanode_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.ReportBlockRequest.datanode_id)
}

// repeated .dfs.BlockReport blocks = 2;
inline int ReportBlockRequest::_internal_blocks_size() const {
  return _internal_blocks().size();
}
inline int ReportBlockRequest::blocks_size() const {
  return _internal_blocks_size();
}
inline void ReportBlockRequest::clear_blocks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocks_.Clear();
}
inline ::dfs::BlockReport* ReportBlockRequest::mutable_blocks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dfs.ReportBlockRequest.blocks)
  return _internal_mutable_blocks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dfs::BlockReport>* ReportBlockRequest::mutable_blocks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dfs.ReportBlockRequest.blocks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocks();
}
inline const ::dfs::BlockReport& ReportBlockRequest::blocks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.ReportBlockRequest.blocks)
  return _internal_blocks().Get(index);
}
inline ::dfs::BlockReport* ReportBlockRequest::add_blocks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::dfs::BlockReport* _add = _internal_mutable_blocks()->Add();
  // @@protoc_insertion_point(field_add:dfs.ReportBlockRequest.blocks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dfs::BlockReport>& ReportBlockRequest::blocks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dfs.ReportBlockRequest.blocks)
  return _internal_blocks();
}
inline const ::google::protobuf::RepeatedPtrField<::dfs::BlockReport>&
ReportBlockRequest::_internal_blocks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocks_;
}
inline ::google::protobuf::RepeatedPtrField<::dfs::BlockReport>*
ReportBlockRequest::_internal_mutable_blocks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocks_;
}

// -------------------------------------------------------------------

// ReportBlockResponse

// bool success = 1;
inline void ReportBlockResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ReportBlockResponse::success() const {
  // @@protoc_insertion_point(field_get:dfs.ReportBlockResponse.success)
  return _internal_success();
}
inline void ReportBlockResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:dfs.ReportBlockResponse.success)
}
inline bool ReportBlockResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ReportBlockResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// BlockReport

// int64 block_id = 1;
inline void BlockReport::clear_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t BlockReport::block_id() const {
  // @@protoc_insertion_point(field_get:dfs.BlockReport.block_id)
  return _internal_block_id();
}
inline void BlockReport::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:dfs.BlockReport.block_id)
}
inline ::int64_t BlockReport::_internal_block_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_id_;
}
inline void BlockReport::_internal_set_block_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = value;
}

// string filename = 2;
inline void BlockReport::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& BlockReport::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockReport.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockReport::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.BlockReport.filename)
}
inline std::string* BlockReport::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:dfs.BlockReport.filename)
  return _s;
}
inline const std::string& BlockReport::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void BlockReport::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* BlockReport::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* BlockReport::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.BlockReport.filename)
  return _impl_.filename_.Release();
}
inline void BlockReport::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.BlockReport.filename)
}

// -------------------------------------------------------------------

// BlockLocation

// int64 block_id = 1;
inline void BlockLocation::clear_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t BlockLocation::block_id() const {
  // @@protoc_insertion_point(field_get:dfs.BlockLocation.block_id)
  return _internal_block_id();
}
inline void BlockLocation::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:dfs.BlockLocation.block_id)
}
inline ::int64_t BlockLocation::_internal_block_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_id_;
}
inline void BlockLocation::_internal_set_block_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = value;
}

// string primary_address = 2;
inline void BlockLocation::clear_primary_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_address_.ClearToEmpty();
}
inline const std::string& BlockLocation::primary_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockLocation.primary_address)
  return _internal_primary_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockLocation::set_primary_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.BlockLocation.primary_address)
}
inline std::string* BlockLocation::mutable_primary_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_address();
  // @@protoc_insertion_point(field_mutable:dfs.BlockLocation.primary_address)
  return _s;
}
inline const std::string& BlockLocation::_internal_primary_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_address_.Get();
}
inline void BlockLocation::_internal_set_primary_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_address_.Set(value, GetArena());
}
inline std::string* BlockLocation::_internal_mutable_primary_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.primary_address_.Mutable( GetArena());
}
inline std::string* BlockLocation::release_primary_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.BlockLocation.primary_address)
  return _impl_.primary_address_.Release();
}
inline void BlockLocation::set_allocated_primary_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primary_address_.IsDefault()) {
    _impl_.primary_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.BlockLocation.primary_address)
}

// repeated string replica_addresses = 3;
inline int BlockLocation::_internal_replica_addresses_size() const {
  return _internal_replica_addresses().size();
}
inline int BlockLocation::replica_addresses_size() const {
  return _internal_replica_addresses_size();
}
inline void BlockLocation::clear_replica_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.replica_addresses_.Clear();
}
inline std::string* BlockLocation::add_replica_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_replica_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:dfs.BlockLocation.replica_addresses)
  return _s;
}
inline const std::string& BlockLocation::replica_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockLocation.replica_addresses)
  return _internal_replica_addresses().Get(index);
}
inline std::string* BlockLocation::mutable_replica_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dfs.BlockLocation.replica_addresses)
  return _internal_mutable_replica_addresses()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void BlockLocation::set_replica_addresses(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_replica_addresses()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:dfs.BlockLocation.replica_addresses)
}
template <typename Arg_, typename... Args_>
inline void BlockLocation::add_replica_addresses(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_replica_addresses(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:dfs.BlockLocation.replica_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BlockLocation::replica_addresses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dfs.BlockLocation.replica_addresses)
  return _internal_replica_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BlockLocation::mutable_replica_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dfs.BlockLocation.replica_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_replica_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BlockLocation::_internal_replica_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.replica_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BlockLocation::_internal_mutable_replica_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.replica_addresses_;
}

// -------------------------------------------------------------------

// BlockReplicationRequest

// int64 block_id = 1;
inline void BlockReplicationRequest::clear_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t BlockReplicationRequest::block_id() const {
  // @@protoc_insertion_point(field_get:dfs.BlockReplicationRequest.block_id)
  return _internal_block_id();
}
inline void BlockReplicationRequest::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:dfs.BlockReplicationRequest.block_id)
}
inline ::int64_t BlockReplicationRequest::_internal_block_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_id_;
}
inline void BlockReplicationRequest::_internal_set_block_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = value;
}

// string filename = 2;
inline void BlockReplicationRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& BlockReplicationRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockReplicationRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockReplicationRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.BlockReplicationRequest.filename)
}
inline std::string* BlockReplicationRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:dfs.BlockReplicationRequest.filename)
  return _s;
}
inline const std::string& BlockReplicationRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void BlockReplicationRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* BlockReplicationRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* BlockReplicationRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.BlockReplicationRequest.filename)
  return _impl_.filename_.Release();
}
inline void BlockReplicationRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.BlockReplicationRequest.filename)
}

// bytes data = 3;
inline void BlockReplicationRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BlockReplicationRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dfs.BlockReplicationRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockReplicationRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dfs.BlockReplicationRequest.data)
}
inline std::string* BlockReplicationRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dfs.BlockReplicationRequest.data)
  return _s;
}
inline const std::string& BlockReplicationRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void BlockReplicationRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* BlockReplicationRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* BlockReplicationRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:dfs.BlockReplicationRequest.data)
  return _impl_.data_.Release();
}
inline void BlockReplicationRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:dfs.BlockReplicationRequest.data)
}

// -------------------------------------------------------------------

// BlockReplicationResponse

// bool success = 1;
inline void BlockReplicationResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool BlockReplicationResponse::success() const {
  // @@protoc_insertion_point(field_get:dfs.BlockReplicationResponse.success)
  return _internal_success();
}
inline void BlockReplicationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:dfs.BlockReplicationResponse.success)
}
inline bool BlockReplicationResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void BlockReplicationResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace dfs


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // dfs_2eproto_2epb_2eh

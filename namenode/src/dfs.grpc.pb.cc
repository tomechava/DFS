// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dfs.proto

#include "dfs.pb.h"
#include "dfs.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dfs {

static const char* NameNodeService_method_names[] = {
  "/dfs.NameNodeService/PutFile",
  "/dfs.NameNodeService/GetFile",
  "/dfs.NameNodeService/ListFiles",
  "/dfs.NameNodeService/RemoveFile",
};

std::unique_ptr< NameNodeService::Stub> NameNodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NameNodeService::Stub> stub(new NameNodeService::Stub(channel, options));
  return stub;
}

NameNodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PutFile_(NameNodeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFile_(NameNodeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFiles_(NameNodeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFile_(NameNodeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NameNodeService::Stub::PutFile(::grpc::ClientContext* context, const ::dfs::PutFileRequest& request, ::dfs::PutFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::PutFileRequest, ::dfs::PutFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutFile_, context, request, response);
}

void NameNodeService::Stub::async::PutFile(::grpc::ClientContext* context, const ::dfs::PutFileRequest* request, ::dfs::PutFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::PutFileRequest, ::dfs::PutFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutFile_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::PutFile(::grpc::ClientContext* context, const ::dfs::PutFileRequest* request, ::dfs::PutFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::PutFileResponse>* NameNodeService::Stub::PrepareAsyncPutFileRaw(::grpc::ClientContext* context, const ::dfs::PutFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::PutFileResponse, ::dfs::PutFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::PutFileResponse>* NameNodeService::Stub::AsyncPutFileRaw(::grpc::ClientContext* context, const ::dfs::PutFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::GetFile(::grpc::ClientContext* context, const ::dfs::GetFileRequest& request, ::dfs::GetFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::GetFileRequest, ::dfs::GetFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFile_, context, request, response);
}

void NameNodeService::Stub::async::GetFile(::grpc::ClientContext* context, const ::dfs::GetFileRequest* request, ::dfs::GetFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::GetFileRequest, ::dfs::GetFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFile_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::GetFile(::grpc::ClientContext* context, const ::dfs::GetFileRequest* request, ::dfs::GetFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::GetFileResponse>* NameNodeService::Stub::PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::dfs::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::GetFileResponse, ::dfs::GetFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::GetFileResponse>* NameNodeService::Stub::AsyncGetFileRaw(::grpc::ClientContext* context, const ::dfs::GetFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::ListFiles(::grpc::ClientContext* context, const ::dfs::ListFilesRequest& request, ::dfs::ListFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::ListFilesRequest, ::dfs::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListFiles_, context, request, response);
}

void NameNodeService::Stub::async::ListFiles(::grpc::ClientContext* context, const ::dfs::ListFilesRequest* request, ::dfs::ListFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::ListFilesRequest, ::dfs::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::ListFiles(::grpc::ClientContext* context, const ::dfs::ListFilesRequest* request, ::dfs::ListFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::ListFilesResponse>* NameNodeService::Stub::PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::dfs::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::ListFilesResponse, ::dfs::ListFilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::ListFilesResponse>* NameNodeService::Stub::AsyncListFilesRaw(::grpc::ClientContext* context, const ::dfs::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NameNodeService::Stub::RemoveFile(::grpc::ClientContext* context, const ::dfs::RemoveFileRequest& request, ::dfs::RemoveFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::RemoveFileRequest, ::dfs::RemoveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFile_, context, request, response);
}

void NameNodeService::Stub::async::RemoveFile(::grpc::ClientContext* context, const ::dfs::RemoveFileRequest* request, ::dfs::RemoveFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::RemoveFileRequest, ::dfs::RemoveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFile_, context, request, response, std::move(f));
}

void NameNodeService::Stub::async::RemoveFile(::grpc::ClientContext* context, const ::dfs::RemoveFileRequest* request, ::dfs::RemoveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::RemoveFileResponse>* NameNodeService::Stub::PrepareAsyncRemoveFileRaw(::grpc::ClientContext* context, const ::dfs::RemoveFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::RemoveFileResponse, ::dfs::RemoveFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::RemoveFileResponse>* NameNodeService::Stub::AsyncRemoveFileRaw(::grpc::ClientContext* context, const ::dfs::RemoveFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

NameNodeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::dfs::PutFileRequest, ::dfs::PutFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::PutFileRequest* req,
             ::dfs::PutFileResponse* resp) {
               return service->PutFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::dfs::GetFileRequest, ::dfs::GetFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::GetFileRequest* req,
             ::dfs::GetFileResponse* resp) {
               return service->GetFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::dfs::ListFilesRequest, ::dfs::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::ListFilesRequest* req,
             ::dfs::ListFilesResponse* resp) {
               return service->ListFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameNodeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameNodeService::Service, ::dfs::RemoveFileRequest, ::dfs::RemoveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::RemoveFileRequest* req,
             ::dfs::RemoveFileResponse* resp) {
               return service->RemoveFile(ctx, req, resp);
             }, this)));
}

NameNodeService::Service::~Service() {
}

::grpc::Status NameNodeService::Service::PutFile(::grpc::ServerContext* context, const ::dfs::PutFileRequest* request, ::dfs::PutFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::GetFile(::grpc::ServerContext* context, const ::dfs::GetFileRequest* request, ::dfs::GetFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::ListFiles(::grpc::ServerContext* context, const ::dfs::ListFilesRequest* request, ::dfs::ListFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::RemoveFile(::grpc::ServerContext* context, const ::dfs::RemoveFileRequest* request, ::dfs::RemoveFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DataNodeService_method_names[] = {
  "/dfs.DataNodeService/UploadBlock",
  "/dfs.DataNodeService/DownloadBlock",
};

std::unique_ptr< DataNodeService::Stub> DataNodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataNodeService::Stub> stub(new DataNodeService::Stub(channel, options));
  return stub;
}

DataNodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadBlock_(DataNodeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadBlock_(DataNodeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataNodeService::Stub::UploadBlock(::grpc::ClientContext* context, const ::dfs::BlockUploadRequest& request, ::dfs::BlockUploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::BlockUploadRequest, ::dfs::BlockUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadBlock_, context, request, response);
}

void DataNodeService::Stub::async::UploadBlock(::grpc::ClientContext* context, const ::dfs::BlockUploadRequest* request, ::dfs::BlockUploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::BlockUploadRequest, ::dfs::BlockUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadBlock_, context, request, response, std::move(f));
}

void DataNodeService::Stub::async::UploadBlock(::grpc::ClientContext* context, const ::dfs::BlockUploadRequest* request, ::dfs::BlockUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::BlockUploadResponse>* DataNodeService::Stub::PrepareAsyncUploadBlockRaw(::grpc::ClientContext* context, const ::dfs::BlockUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::BlockUploadResponse, ::dfs::BlockUploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::BlockUploadResponse>* DataNodeService::Stub::AsyncUploadBlockRaw(::grpc::ClientContext* context, const ::dfs::BlockUploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataNodeService::Stub::DownloadBlock(::grpc::ClientContext* context, const ::dfs::BlockDownloadRequest& request, ::dfs::BlockDownloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::BlockDownloadRequest, ::dfs::BlockDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadBlock_, context, request, response);
}

void DataNodeService::Stub::async::DownloadBlock(::grpc::ClientContext* context, const ::dfs::BlockDownloadRequest* request, ::dfs::BlockDownloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::BlockDownloadRequest, ::dfs::BlockDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadBlock_, context, request, response, std::move(f));
}

void DataNodeService::Stub::async::DownloadBlock(::grpc::ClientContext* context, const ::dfs::BlockDownloadRequest* request, ::dfs::BlockDownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::BlockDownloadResponse>* DataNodeService::Stub::PrepareAsyncDownloadBlockRaw(::grpc::ClientContext* context, const ::dfs::BlockDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::BlockDownloadResponse, ::dfs::BlockDownloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::BlockDownloadResponse>* DataNodeService::Stub::AsyncDownloadBlockRaw(::grpc::ClientContext* context, const ::dfs::BlockDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataNodeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataNodeService::Service, ::dfs::BlockUploadRequest, ::dfs::BlockUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::BlockUploadRequest* req,
             ::dfs::BlockUploadResponse* resp) {
               return service->UploadBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataNodeService::Service, ::dfs::BlockDownloadRequest, ::dfs::BlockDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::BlockDownloadRequest* req,
             ::dfs::BlockDownloadResponse* resp) {
               return service->DownloadBlock(ctx, req, resp);
             }, this)));
}

DataNodeService::Service::~Service() {
}

::grpc::Status DataNodeService::Service::UploadBlock(::grpc::ServerContext* context, const ::dfs::BlockUploadRequest* request, ::dfs::BlockUploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataNodeService::Service::DownloadBlock(::grpc::ServerContext* context, const ::dfs::BlockDownloadRequest* request, ::dfs::BlockDownloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ClusterService_method_names[] = {
  "/dfs.ClusterService/RegisterDataNode",
  "/dfs.ClusterService/Heartbeat",
  "/dfs.ClusterService/ReportBlock",
};

std::unique_ptr< ClusterService::Stub> ClusterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClusterService::Stub> stub(new ClusterService::Stub(channel, options));
  return stub;
}

ClusterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterDataNode_(ClusterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(ClusterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportBlock_(ClusterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClusterService::Stub::RegisterDataNode(::grpc::ClientContext* context, const ::dfs::RegisterDataNodeRequest& request, ::dfs::RegisterDataNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::RegisterDataNodeRequest, ::dfs::RegisterDataNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterDataNode_, context, request, response);
}

void ClusterService::Stub::async::RegisterDataNode(::grpc::ClientContext* context, const ::dfs::RegisterDataNodeRequest* request, ::dfs::RegisterDataNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::RegisterDataNodeRequest, ::dfs::RegisterDataNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDataNode_, context, request, response, std::move(f));
}

void ClusterService::Stub::async::RegisterDataNode(::grpc::ClientContext* context, const ::dfs::RegisterDataNodeRequest* request, ::dfs::RegisterDataNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDataNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::RegisterDataNodeResponse>* ClusterService::Stub::PrepareAsyncRegisterDataNodeRaw(::grpc::ClientContext* context, const ::dfs::RegisterDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::RegisterDataNodeResponse, ::dfs::RegisterDataNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterDataNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::RegisterDataNodeResponse>* ClusterService::Stub::AsyncRegisterDataNodeRaw(::grpc::ClientContext* context, const ::dfs::RegisterDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterDataNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterService::Stub::Heartbeat(::grpc::ClientContext* context, const ::dfs::HeartbeatRequest& request, ::dfs::HeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::HeartbeatRequest, ::dfs::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void ClusterService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::dfs::HeartbeatRequest* request, ::dfs::HeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::HeartbeatRequest, ::dfs::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void ClusterService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::dfs::HeartbeatRequest* request, ::dfs::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::HeartbeatResponse>* ClusterService::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::dfs::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::HeartbeatResponse, ::dfs::HeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::HeartbeatResponse>* ClusterService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::dfs::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterService::Stub::ReportBlock(::grpc::ClientContext* context, const ::dfs::ReportBlockRequest& request, ::dfs::ReportBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dfs::ReportBlockRequest, ::dfs::ReportBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportBlock_, context, request, response);
}

void ClusterService::Stub::async::ReportBlock(::grpc::ClientContext* context, const ::dfs::ReportBlockRequest* request, ::dfs::ReportBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dfs::ReportBlockRequest, ::dfs::ReportBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportBlock_, context, request, response, std::move(f));
}

void ClusterService::Stub::async::ReportBlock(::grpc::ClientContext* context, const ::dfs::ReportBlockRequest* request, ::dfs::ReportBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs::ReportBlockResponse>* ClusterService::Stub::PrepareAsyncReportBlockRaw(::grpc::ClientContext* context, const ::dfs::ReportBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dfs::ReportBlockResponse, ::dfs::ReportBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dfs::ReportBlockResponse>* ClusterService::Stub::AsyncReportBlockRaw(::grpc::ClientContext* context, const ::dfs::ReportBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClusterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterService::Service, ::dfs::RegisterDataNodeRequest, ::dfs::RegisterDataNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::RegisterDataNodeRequest* req,
             ::dfs::RegisterDataNodeResponse* resp) {
               return service->RegisterDataNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterService::Service, ::dfs::HeartbeatRequest, ::dfs::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::HeartbeatRequest* req,
             ::dfs::HeartbeatResponse* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterService::Service, ::dfs::ReportBlockRequest, ::dfs::ReportBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dfs::ReportBlockRequest* req,
             ::dfs::ReportBlockResponse* resp) {
               return service->ReportBlock(ctx, req, resp);
             }, this)));
}

ClusterService::Service::~Service() {
}

::grpc::Status ClusterService::Service::RegisterDataNode(::grpc::ServerContext* context, const ::dfs::RegisterDataNodeRequest* request, ::dfs::RegisterDataNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterService::Service::Heartbeat(::grpc::ServerContext* context, const ::dfs::HeartbeatRequest* request, ::dfs::HeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterService::Service::ReportBlock(::grpc::ServerContext* context, const ::dfs::ReportBlockRequest* request, ::dfs::ReportBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dfs

